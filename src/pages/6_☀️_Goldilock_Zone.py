import streamlit as st
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Chargement des donn√©es
data_path = './data/all_exoplanets_with_goldilock_zone.csv'
data = pd.read_csv(data_path)

# Configuration de la page Streamlit
st.set_page_config(page_title="Outer Planets", page_icon="ü™ê", layout="wide")

# Sidebar avec logo
st.sidebar.image("./OP-logo-2.png", use_column_width=True)

# Titre de la section
st.title("‚òÄÔ∏è Goldilock Zone")

# Explication de la Goldilock Zone
st.header("Qu'est-ce que la Goldilock Zone ?")
st.write("""
La Goldilock Zone, ou zone habitable, est la r√©gion autour d'une √©toile o√π les conditions peuvent √™tre juste comme il faut pour permettre l'existence de l'eau liquide √† la surface d'une plan√®te. Cette zone n'est ni trop chaude ni trop froide, mais juste √† la bonne distance pour que l'eau ne s'√©vapore pas compl√®tement ni ne g√®le. L'existence d'eau liquide est consid√©r√©e comme l'une des conditions essentielles pour la vie telle que nous la connaissons.
""")

st.write(data.head())

num_goldilocks = data['In Goldilock Zone'].sum()
total_planets = len(data)
st.write(
    f"Nombre de plan√®tes dans la Goldilock Zone : {num_goldilocks} sur {total_planets} ({num_goldilocks / total_planets:.2%})")

st.header("Calcul de la Goldilock Zone")
st.write("""
```python
def is_in_goldilock_zone(row):
    T_star = row['Stellar Effective Temperature']  # Temp√©rature effective de l'√©toile
    R_star = row['Stellar Radius']  # Rayon stellaire
    a_planet = row['Orbit Semi-Major Axis']  # Axe semi-major de l'orbite de la plan√®te

    if pd.isna(T_star) or pd.isna(R_star) or pd.isna(a_planet):
        return 0

    # Calcul de la luminosit√© stellaire en unit√©s solaires
    T_sun = 5778  # Temp√©rature effective du Soleil en Kelvin
    L_star = (R_star**2) * ((T_star / T_sun)**4)

    # Calcul des distances de la zone habitable
    inner_hz = np.sqrt(L_star) * 0.75
    outer_hz = np.sqrt(L_star) * 1.77

    # V√©rification si la plan√®te est dans la zone habitable
    return 1 if inner_hz <= a_planet <= outer_hz else 0
```
""")

st.header("Visualisation des Donn√©es de la Goldilock Zone")

# Clustering
st.header("Analyse de Clustering des Exoplan√®tes")

# S√©lection des caract√©ristiques pertinentes pour le clustering
features = data[['Orbital Period Days', 'Orbit Semi-Major Axis', 'Insolation Flux', 'Equilibrium Temperature',
                 'Stellar Effective Temperature', 'Stellar Radius', 'Stellar Mass']]

features_cleaned = features.dropna()

# Normalisation des donn√©es
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features_cleaned)

# Application de K-means
kmeans = KMeans(n_clusters=5)
clusters = kmeans.fit_predict(scaled_features)

# Cr√©ation d'un DataFrame pour les donn√©es nettoy√©es et normalis√©es
cleaned_data = data.dropna(subset=features_cleaned.columns).copy()

# Supprimer la colonne 'Cluster' si elle existe d√©j√†
if 'Cluster' in cleaned_data.columns:
    cleaned_data.drop(columns=['Cluster'], inplace=True)

# Ajouter la nouvelle colonne 'Cluster'
cleaned_data['Cluster'] = clusters

# Explication des Clusters
st.write("""
Les clusters permettent de regrouper les exoplan√®tes en fonction de leurs caract√©ristiques orbitales et stellaires. Chaque cluster peut potentiellement repr√©senter une cat√©gorie distincte d'exoplan√®tes avec des propri√©t√©s similaires. Par exemple, un cluster pourrait regrouper des plan√®tes proches de leur √©toile avec des p√©riodes orbitales courtes, tandis qu'un autre cluster pourrait regrouper des plan√®tes plus √©loign√©es avec des p√©riodes orbitales plus longues et des temp√©ratures d'√©quilibre plus basses.
""")

# Visualisation des clusters avec Plotly
st.write("""
### Visualisation Interactive des Clusters avec Plotly
Ce graphique interactif permet d'explorer les clusters en survolant les points pour voir les d√©tails des exoplan√®tes. Il montre la r√©partition des exoplan√®tes selon l'axe semi-majeur et la temp√©rature d'√©quilibre, avec une coloration par cluster.
""")
fig_plotly = px.scatter(cleaned_data[cleaned_data['Orbit Semi-Major Axis'] <= 8], x='Orbit Semi-Major Axis', y='Equilibrium Temperature', color='Cluster',
                        title='Clustering des Exoplan√®tes', labels={'Orbit Semi-Major Axis': 'Orbit Semi-Major Axis',
                                                                    'Equilibrium Temperature': 'Equilibrium Temperature'})
st.plotly_chart(fig_plotly)

# Afficher les plan√®tes dans la Goldilock Zone
goldilocks_data = cleaned_data[cleaned_data['In Goldilock Zone'] == 1]
st.header("Plan√®tes dans la Goldilock Zone")
st.write(goldilocks_data[
             ['Planet Name', 'Planet Host', 'Orbital Period Days', 'Orbit Semi-Major Axis', 'Insolation Flux',
              'Equilibrium Temperature', 'Stellar Effective Temperature', 'Stellar Radius', 'Stellar Mass', 'Cluster']])

# Visualisation des plan√®tes dans la Goldilock Zone avec Plotly
st.write("""
### Distribution des Plan√®tes dans la Goldilock Zone selon les Clusters
Ce graphique montre la r√©partition des plan√®tes situ√©es dans la Goldilock Zone en fonction de leur axe semi-majeur et de leur temp√©rature d'√©quilibre. Il permet d'identifier les clusters de plan√®tes potentiellement habitables.
""")
fig_goldilocks = px.scatter(goldilocks_data, x='Orbit Semi-Major Axis', y='Equilibrium Temperature', color='Cluster',
                            title='Plan√®tes dans la Goldilock Zone',
                            labels={'Orbit Semi-Major Axis': 'Orbit Semi-Major Axis',
                                    'Equilibrium Temperature': 'Equilibrium Temperature'})
st.plotly_chart(fig_goldilocks)

# CLASSIFICATION
st.header("Mod√®le de classification pour les Exoplan√®tes")

features = ['Orbit Semi-Major Axis', 'Stellar Effective Temperature', 'Stellar Radius']
target = 'In Goldilock Zone'

# S√©lection des donn√©es pertinentes
data = data[features + [target]].dropna()

# S√©paration des donn√©es en ensemble d'entra√Ænement et ensemble de test
X = data[features]
y = data[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialisation et entra√Ænement du mod√®le de r√©gression logistique
model = LogisticRegression()
model.fit(X_train, y_train)

# Pr√©dictions sur l'ensemble de test
y_pred = model.predict(X_test)

# √âvaluation du mod√®le
st.subheader("Performance du mod√®le de classification:")

# Affichage du rapport de classification
st.write("Le rapport de classification fournit des d√©tails sur la pr√©cision, le rappel et le F1-score pour chaque classe.")
st.text(classification_report(y_test, y_pred))

# Affichage de la matrice de confusion
st.write("La matrice de confusion montre les pr√©dictions correctes et incorrectes faites par le mod√®le.")
st.write(pd.DataFrame(confusion_matrix(y_test, y_pred),
                     columns=['Pr√©dit n√©gatif', 'Pr√©dit positif'],
                     index=['Vrai n√©gatif', 'Vrai positif']))

# Visualisation des coefficients de r√©gression
coefficients = pd.DataFrame({
    'Feature': features,
    'Coefficient': model.coef_[0]
})
st.subheader("Coefficients du mod√®le de classification:")

# Affichage des coefficients de r√©gression avec une explication
st.write("Les coefficients indiquent l'impact de chaque feature sur la pr√©diction de 'In Goldilock Zone'.")
st.write(coefficients)

# Visualisation interactive des coefficients de r√©gression avec Plotly
st.write("Graphique interactif montrant l'importance relative de chaque feature.")
fig_classification_report = px.bar(x=coefficients['Feature'], y=coefficients['Coefficient'],
                                   labels={'x': 'Feature', 'y': 'Coefficient'},
                                   title="Coefficients de r√©gression")
st.plotly_chart(fig_classification_report)
