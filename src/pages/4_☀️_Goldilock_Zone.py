import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import plotly.express as px

# Chargement des donn√©es
data_path = './data/all_exoplanets_2021.csv'
data = pd.read_csv(data_path)

# Configuration de la page Streamlit
st.set_page_config(page_title="Outer Planets", page_icon="ü™ê", layout="wide")

# Sidebar avec logo
st.sidebar.image("./OP-logo-2.png", use_column_width=True)

# Titre de la section
st.title("‚òÄÔ∏è Goldilock Zone")

# Explication de la Goldilock Zone
st.header("Qu'est-ce que la Goldilock Zone ?")
st.write("""
La Goldilock Zone, ou zone habitable, est la r√©gion autour d'une √©toile o√π les conditions peuvent √™tre juste comme il faut pour permettre l'existence de l'eau liquide √† la surface d'une plan√®te. Cette zone n'est ni trop chaude ni trop froide, mais juste √† la bonne distance pour que l'eau ne s'√©vapore pas compl√®tement ni ne g√®le. L'existence d'eau liquide est consid√©r√©e comme l'une des conditions essentielles pour la vie telle que nous la connaissons.
""")


# Fonction pour calculer la zone habitable
def is_in_goldilock_zone(row):
    T_star = row['Stellar Effective Temperature']  # Temp√©rature effective de l'√©toile
    R_star = row['Stellar Radius']  # Rayon stellaire
    a_planet = row['Orbit Semi-Major Axis']  # Axe semi-major de l'orbite de la plan√®te

    if pd.isna(T_star) or pd.isna(R_star) or pd.isna(a_planet):
        return 0

    # Calcul de la luminosit√© stellaire en unit√©s solaires
    T_sun = 5778  # Temp√©rature effective du Soleil en Kelvin
    L_star = (R_star**2) * ((T_star / T_sun)**4)

    # Calcul des distances de la zone habitable
    inner_hz = np.sqrt(L_star) * 0.75
    outer_hz = np.sqrt(L_star) * 1.77

    # V√©rification si la plan√®te est dans la zone habitable
    return 1 if inner_hz <= a_planet <= outer_hz else 0

# Application de la fonction √† chaque ligne du DataFrame
data['In Goldilock Zone'] = data.apply(is_in_goldilock_zone, axis=1)

# Affichage des premi√®res lignes pour v√©rifier
st.write(data.head())

# Sauvegarder le DataFrame modifi√© si n√©cessaire
data.to_csv('./data/all_exoplanets_with_goldilock_zone.csv', index=False)

# Visualisation des Donn√©es de la Goldilock Zone
st.header("Visualisation des Donn√©es de la Goldilock Zone")

# Clustering
st.header("Analyse de Clustering des Exoplan√®tes")

# S√©lection des caract√©ristiques pertinentes pour le clustering
features = data[['Orbital Period Days', 'Orbit Semi-Major Axis', 'Insolation Flux', 'Equilibrium Temperature', 'Stellar Effective Temperature', 'Stellar Radius', 'Stellar Mass']]

# Nettoyage des donn√©es
features_cleaned = features.dropna()

# Normalisation des donn√©es
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features_cleaned)

# Application de K-means
kmeans = KMeans(n_clusters=5)
clusters = kmeans.fit_predict(scaled_features)

# Cr√©ation d'un DataFrame pour les donn√©es nettoy√©es et normalis√©es
cleaned_data = data.dropna(subset=['Orbital Period Days', 'Orbit Semi-Major Axis', 'Insolation Flux', 'Equilibrium Temperature', 'Stellar Effective Temperature', 'Stellar Radius', 'Stellar Mass']).copy()

# Supprimer la colonne 'Cluster' si elle existe d√©j√†
if 'Cluster' in cleaned_data.columns:
    cleaned_data.drop(columns=['Cluster'], inplace=True)

# Ajouter la nouvelle colonne 'Cluster'
cleaned_data['Cluster'] = clusters

# Explication des Clusters
st.write("""
## Analyse des Clusters
Les clusters permettent de regrouper les exoplan√®tes en fonction de leurs caract√©ristiques orbitales et stellaires. Chaque cluster peut potentiellement repr√©senter une cat√©gorie distincte d'exoplan√®tes avec des propri√©t√©s similaires. Par exemple, un cluster pourrait regrouper des plan√®tes proches de leur √©toile avec des p√©riodes orbitales courtes, tandis qu'un autre cluster pourrait regrouper des plan√®tes plus √©loign√©es avec des p√©riodes orbitales plus longues et des temp√©ratures d'√©quilibre plus basses.
""")

# Visualisation des clusters
st.write("""
### Graphique 1 : Distribution des Clusters selon l'Axe Semi-Majeur et la Temp√©rature d'√âquilibre
Ce graphique montre comment les exoplan√®tes sont r√©parties en diff√©rents clusters selon leur axe semi-majeur et leur temp√©rature d'√©quilibre. Cela permet d'identifier les groupes d'exoplan√®tes avec des propri√©t√©s similaires en termes de distance par rapport √† leur √©toile et de temp√©rature.
""")
fig, ax = plt.subplots(figsize=(10, 6))
sns.scatterplot(x='Orbit Semi-Major Axis', y='Equilibrium Temperature', hue='Cluster', data=cleaned_data, palette='viridis', ax=ax)
plt.xlabel('Orbit Semi-Major Axis')
plt.ylabel('Equilibrium Temperature')
plt.title('Clustering des Exoplan√®tes')
st.pyplot(fig)

# Affichage des clusters en radar chart (facultatif)
st.write("""
### Graphique 2 : Radar Chart des Caract√©ristiques Moyennes des Clusters
Ce radar chart montre les caract√©ristiques moyennes des exoplan√®tes dans chaque cluster. Il permet de visualiser les diff√©rences entre les clusters en termes de temp√©rature effective stellaire, de flux d'insolation, de p√©riode orbitale, etc.
""")
# Pr√©parer les donn√©es pour radar chart
# S√©lectionner uniquement les colonnes num√©riques
numeric_cols = cleaned_data.select_dtypes(include=[np.number]).columns.tolist()
cluster_means = cleaned_data.groupby('Cluster')[numeric_cols].mean().reset_index(drop=True)

fig_radar = px.line_polar(cluster_means, r='Stellar Effective Temperature', theta='Cluster', line_close=True)
st.plotly_chart(fig_radar)

# Visualisation avec Plotly
st.write("""
### Graphique 3 : Visualisation Interactive des Clusters avec Plotly
Ce graphique interactif permet d'explorer les clusters en survolant les points pour voir les d√©tails des exoplan√®tes. Il montre la r√©partition des exoplan√®tes selon l'axe semi-majeur et la temp√©rature d'√©quilibre, avec une coloration par cluster.
""")
fig_plotly = px.scatter(cleaned_data, x='Orbit Semi-Major Axis', y='Equilibrium Temperature', color='Cluster',
                        title='Clustering des Exoplan√®tes', labels={'Orbit Semi-Major Axis':'Orbit Semi-Major Axis', 'Equilibrium Temperature':'Equilibrium Temperature'})
st.plotly_chart(fig_plotly)

# Afficher les plan√®tes dans la Goldilock Zone
goldilocks_data = cleaned_data[cleaned_data['In Goldilock Zone'] == 1]
st.header("Plan√®tes dans la Goldilock Zone")
st.write(goldilocks_data[['Planet Name', 'Planet Host', 'Orbital Period Days', 'Orbit Semi-Major Axis', 'Insolation Flux', 'Equilibrium Temperature', 'Stellar Effective Temperature', 'Stellar Radius', 'Stellar Mass', 'Cluster']])

# Visualisation des plan√®tes dans la Goldilock Zone
st.write("""
### Graphique 4 : Distribution des Plan√®tes dans la Goldilock Zone selon les Clusters
Ce graphique montre la r√©partition des plan√®tes situ√©es dans la Goldilock Zone en fonction de leur axe semi-majeur et de leur temp√©rature d'√©quilibre. Il permet d'identifier les clusters de plan√®tes potentiellement habitables.
""")
fig_goldilocks, ax_goldilocks = plt.subplots(figsize=(10, 6))
sns.scatterplot(x='Orbit Semi-Major Axis', y='Equilibrium Temperature', hue='Cluster', data=goldilocks_data, palette='coolwarm', ax=ax_goldilocks)
plt.xlabel('Orbit Semi-Major Axis')
plt.ylabel('Equilibrium Temperature')
plt.title('Plan√®tes dans la Goldilock Zone')
st.pyplot(fig_goldilocks)
