import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, r2_score, confusion_matrix, roc_curve, auc
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Chargement des donn√©es
data_path = './data/all_exoplanets_2021.csv'
data = pd.read_csv(data_path)

# Configuration de la page Streamlit
st.set_page_config(page_title="Outer Planets", page_icon="ü™ê", layout="wide")

# Sidebar avec logo
st.sidebar.image("./OP-logo-2.png", use_column_width=True)

# Titre de la section
st.title("ü§ñ Mod√®les de ML")

# S√©lection du mod√®le
st.header("S√©lection du Mod√®le")
model_options = ['R√©gression Lin√©aire', 'Arbres de D√©cision', 'For√™t Al√©atoire', 'SVM', 'R√©seaux Neuronaux']
selected_model = st.selectbox("Choisissez un mod√®le de machine learning :", model_options)

# Pr√©paration des Donn√©es
st.header("Pr√©paration des Donn√©es")
st.write("""
S√©lectionnez les caract√©ristiques et la variable cible pour entra√Æner le mod√®le. 
Les √©tapes de s√©paration et de pr√©traitement des donn√©es sont √©galement incluses.
""")

# S√©lection des caract√©ristiques et de la variable cible
features = st.multiselect("S√©lectionnez les caract√©ristiques :", options=data.columns.tolist(), default=['Orbital Period Days', 'Mass', 'Equilibrium Temperature'])
target = st.selectbox("S√©lectionnez la variable cible :", options=data.columns.tolist(), index=data.columns.tolist().index('Stellar Radius'))

# Combinaison des caract√©ristiques et de la variable cible pour le nettoyage
combined_data = data[features + [target]].dropna()

# S√©paration des donn√©es en ensembles d'entra√Ænement et de test
X = combined_data[features]
y = combined_data[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Entra√Ænement et √âvaluation du Mod√®le
st.header("Entra√Ænement et √âvaluation du Mod√®le")
st.write("""
Voici les extraits de code pour l'entra√Ænement du mod√®le et les r√©sultats obtenus.
Des m√©triques telles que la pr√©cision, le RMSE, la matrice de confusion et la courbe ROC sont affich√©es.
""")

def train_and_evaluate_model(model, X_train, X_test, y_train, y_test):
    model.fit(X_train, y_train)
    y_pred_train = model.predict(X_train)
    y_pred_test = model.predict(X_test)

    train_rmse = np.sqrt(mean_squared_error(y_train, y_pred_train))
    test_rmse = np.sqrt(mean_squared_error(y_test, y_pred_test))
    train_r2 = r2_score(y_train, y_pred_train)
    test_r2 = r2_score(y_test, y_pred_test)

    return {
        'train_rmse': train_rmse,
        'test_rmse': test_rmse,
        'train_r2': train_r2,
        'test_r2': test_r2,
        'y_pred_test': y_pred_test,
    }

# S√©lection et entra√Ænement du mod√®le
if selected_model == 'R√©gression Lin√©aire':
    model = LinearRegression()
elif selected_model == 'Arbres de D√©cision':
    model = DecisionTreeRegressor()
elif selected_model == 'For√™t Al√©atoire':
    model = RandomForestRegressor()
elif selected_model == 'SVM':
    model = SVR()
elif selected_model == 'R√©seaux Neuronaux':
    model = MLPRegressor(max_iter=1000)

# Entra√Ænement et √©valuation
results = train_and_evaluate_model(model, X_train, X_test, y_train, y_test)

# Affichage des r√©sultats
st.write(f"### R√©sultats pour {selected_model}")
st.write(f"RMSE d'entra√Ænement : {results['train_rmse']:.2f}")
st.write(f"RMSE de test : {results['test_rmse']:.2f}")
st.write(f"R2 d'entra√Ænement : {results['train_r2']:.2f}")
st.write(f"R2 de test : {results['test_r2']:.2f}")

# Visualisation des pr√©dictions vs valeurs r√©elles
st.write("#### Pr√©dictions vs Valeurs R√©elles")
fig, ax = plt.subplots()
ax.scatter(y_test, results['y_pred_test'])
ax.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
ax.set_xlabel('Valeurs R√©elles')
ax.set_ylabel('Pr√©dictions')
ax.set_title('Pr√©dictions vs Valeurs R√©elles')
st.pyplot(fig)

# Ajustement des Hyperparam√®tres
st.header("Ajustement des Hyperparam√®tres")
st.write("""
Ajustez les hyperparam√®tres du mod√®le et observez leur impact sur les performances.
""")

if selected_model == 'Arbres de D√©cision':
    max_depth = st.slider("Profondeur maximale de l'arbre :", min_value=1, max_value=20, value=5)
    model = DecisionTreeRegressor(max_depth=max_depth)
elif selected_model == 'For√™t Al√©atoire':
    n_estimators = st.slider("Nombre d'arbres dans la for√™t :", min_value=10, max_value=200, value=100, step=10)
    model = RandomForestRegressor(n_estimators=n_estimators)
elif selected_model == 'SVM':
    C = st.slider("Param√®tre de r√©gularisation C :", min_value=0.01, max_value=10.0, value=1.0)
    model = SVR(C=C)
elif selected_model == 'R√©seaux Neuronaux':
    hidden_layer_sizes = st.slider("Taille des couches cach√©es :", min_value=10, max_value=100, value=50, step=10)
    model = MLPRegressor(hidden_layer_sizes=(hidden_layer_sizes,), max_iter=1000)

# R√©entra√Æner le mod√®le avec les nouveaux hyperparam√®tres
results = train_and_evaluate_model(model, X_train, X_test, y_train, y_test)

# Affichage des r√©sultats apr√®s ajustement des hyperparam√®tres
st.write(f"### R√©sultats ajust√©s pour {selected_model}")
st.write(f"RMSE d'entra√Ænement : {results['train_rmse']:.2f}")
st.write(f"RMSE de test : {results['test_rmse']:.2f}")
st.write(f"R2 d'entra√Ænement : {results['train_r2']:.2f}")
st.write(f"R2 de test : {results['test_r2']:.2f}")

# Visualisation des pr√©dictions vs valeurs r√©elles apr√®s ajustement des hyperparam√®tres
st.write("#### Pr√©dictions vs Valeurs R√©elles (Ajustement des Hyperparam√®tres)")
fig, ax = plt.subplots()
ax.scatter(y_test, results['y_pred_test'])
ax.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
ax.set_xlabel('Valeurs R√©elles')
ax.set_ylabel('Pr√©dictions')
ax.set_title('Pr√©dictions vs Valeurs R√©elles (Ajustement des Hyperparam√®tres)')
st.pyplot(fig)

st.write("---")
st.write("Projet r√©alis√© par PERROT--NASI Mat√©o et TOMATIS Margot. Pour plus d'informations, vous pouvez nous retrouver sur nos github.")
